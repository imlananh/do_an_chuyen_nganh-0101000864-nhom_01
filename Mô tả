/*************************************************************
  Download latest ERa library here:
    https://github.com/eoh-jsc/era-lib/releases/latest
    https://www.arduino.cc/reference/en/libraries/era
    https://registry.platformio.org/libraries/eoh-ltd/ERa/installation

    ERa website:                https://e-ra.io
    ERa blog:                   https://iotasia.org
    ERa forum:                  https://forum.eoh.io
    Follow us:                  https://www.fb.com/EoHPlatform
 *************************************************************/

// === PHẦN THƯ VIỆN ===
#include <Arduino.h>
#include <ERa.hpp>
#include <ERa/ERaTimer.hpp>
#include "DHT.h"
#include <TimeLib.h>
#include <time.h>
#include <Preferences.h>

// === DEFINE VÀ CẤU HÌNH ===
#define ERA_DEBUG
#define DEFAULT_MQTT_HOST "mqtt1.eoh.io"
// You should get Auth Token in the ERa App or ERa Dashboard
#define ERA_AUTH_TOKEN "437cb40d-826f-4b7d-b0b9-f720066331c2"

// Ngưỡng độ ẩm đất
#define SOIL_VERY_WET 700    // Đất đủ ẩm, dừng tưới
#define SOIL_VERY_DRY 0      // Đất khô, cần tưới

// Cấu hình WiFi
const char ssid[] = "HUAWEIY9PRIME2019";
const char pass[] = "yesido08";

// Cấu hình múi giờ
#define VN_TIMEZONE 7
#define TIMEZONE_OFFSET VN_TIMEZONE * 3600
#define NTP_SERVER "pool.ntp.org"

// Cấu hình DHT
#define DHTTYPE DHT11
//#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321
//#define DHTTYPE DHT21   // DHT 21 (AM2301)

// Kết nối
// DHT       | ESP32
//----------------
// VCC(1)    |  3.3V
// DATA(2)   |  D3
// NC(3)     |  x
// GND(4)    |  GND

// Kết nối chân 1 của DHT với 3.3V
// Nối trở 10k giữa chân 1 và chân 2

#define DHTPIN 14     // Chân DATA của DHT

// === ĐỊNH NGHĨA CHÂN CẮM ===
#define sensorPin 25          // Cảm biến lưu lượng
#define floatSwitchPin 27     // Cảm biến phao

#define led 4                 // LED chế độ Auto/Manual
#define button 5              // Nút nhấn chuyển chế độ

#define led1 16              // LED báo động cơ tưới
#define button1 18           // Nút nhấn điều khiển tưới

#define led2 17              // LED báo động cơ bơm
#define button2 19           // Nút nhấn điều khiển bơm

#define relay 2              // Relay điều khiển động cơ tưới
#define relay1 15            // Relay điều khiển động cơ bơm

// Định nghĩa cho cảm biến phao
#define SAMPLE_COUNT 25      
#define SAMPLE_DELAY 300     
#define THRESHOLD_HIGH 20    
#define THRESHOLD_LOW 5 
#define DEBOUNCE_DELAY 3000  

// Định nghĩa timeout cho flow
#define NO_FLOW_TIMEOUT 5000  // 5 giây không có flow = hết nước

// Định nghĩa cho cập nhật trạng thái
#define UPDATE_INTERVAL 100   // Cập nhật mỗi 100ms 

// Biến thời gian cho cập nhật
unsigned long lastUpdateTime = 0;


// Định nghĩa cho động cơ
#define MOTOR_PUMP relay1      // Relay điều khiển động cơ bơm
#define MOTOR_WATER relay      // Relay điều khiển động cơ tưới
#define MOTOR_ON HIGH          // Trạng thái bật động cơ
#define MOTOR_OFF LOW          // Trạng thái tắt động cơ

// === KHỞI TẠO ĐỐI TƯỢNG ===
DHT dht(DHTPIN, DHTTYPE);    // Đối tượng DHT
ERaTimer timer;              // Đối tượng Timer
Preferences preferences;      // Đối tượng lưu trữ NVS
// === KHAI BÁO BIẾN TOÀN CỤC ===

// Biến cho cảm biến lưu lượng
volatile unsigned int pulseCount = 0;      // Đếm xung từ cảm biến
float flowRate = 0.0;                      // Lưu lượng tức thời
unsigned int flowMilliLitres = 0;          // Lưu lượng (ml)
unsigned long totalMilliLitres = 0;        // Tổng lưu lượng
unsigned long oldTime = 0;                 // Thời gian trước đó
unsigned long currentFlowMilliLitres = 0;  // Lưu lượng hiện tại
unsigned long accumulatedFlowMilliLitres = 0;  // Tổng lưu lượng tích lũy
unsigned long noFlowStartTime = 0;         // Thời gian bắt đầu không có flow

// Biến cho cảm biến độ ẩm đất
int value = 0;  // Giá trị ADC đọc được

// Biến cho hẹn giờ
int a = 0;  // Giờ
int b = 0;  // Phút
int c = 0;  // Ngày
int d = 0;  // Tháng
int e = 0;  // Năm
int i = 0;  // Biến tạm cho Auto/Manual
int j = 0;  // Biến tạm cho động cơ tưới
int k = 0;  // Biến tạm cho động cơ bơm
int l = 0;  // Lưu lượng đặt

// Biến cho chế độ Auto
bool pumpCycleStarted = false;  // Đánh dấu đã bắt đầu chu kỳ bơm

// Biến cho nút nhấn và LED
boolean buttonState = HIGH;      // Trạng thái nút Auto/Manual
boolean lastButtonState = HIGH;  // Trạng thái trước của nút Auto/Manual
boolean toggleState = LOW;       // Trạng thái Auto/Manual (LOW = Auto)

boolean buttonState1 = HIGH;     // Trạng thái nút tưới
boolean lastButtonState1 = HIGH; // Trạng thái trước của nút tưới
boolean toggleState1 = LOW;      // Trạng thái động cơ tưới

boolean buttonState2 = HIGH;     // Trạng thái nút bơm
boolean lastButtonState2 = HIGH; // Trạng thái trước của nút bơm
boolean toggleState2 = LOW;      // Trạng thái động cơ bơm

int reading;  // Đọc trạng thái phao

// Biến cho xử lý phao
static unsigned long lastReadTime = 0;    // Thời gian đọc phao lần cuối
static int lastStableReading = LOW;       // Trạng thái ổn định cuối cùng của phao

// === KHAI BÁO NGUYÊN MẪU HÀM ===
void timerEvent();
void resetSchedule();
void th();
void doamdat();
void pulseCounter();
void sendFlowData();
void resetTotalFlow();
void resetAccumulatedFlow();
void phao();
void setupTime();
bool checkScheduleSet();
void printLocalTime();
void check_button();
void check_button1();
void check_button2();
void updateMotorStatus();

// === ĐỊNH NGHĨA CÁC HÀM CALLBACK ERA ===

// Hàm hiển thị uptime
void timerEvent() {
    ERA_LOG("Timer", "Uptime: %d", ERaMillis() / 1000L);
}

// Lưu giờ
ERA_WRITE(V1) { 
    a = param.getInt(); 
    preferences.putInt("hour", a);
}

// Lưu phút
ERA_WRITE(V2) { 
    b = param.getInt(); 
    preferences.putInt("minute", b);
}

// Lưu ngày
ERA_WRITE(V3) { 
    c = param.getInt(); 
    preferences.putInt("day", c);
}

// Lưu tháng
ERA_WRITE(V4) { 
    d = param.getInt(); 
    preferences.putInt("month", d);
}

// Lưu năm
ERA_WRITE(V5) { 
    e = param.getInt(); 
    preferences.putInt("year", e);
}

// Lưu lưu lượng đặt
ERA_WRITE(V23) { 
    l = param.getInt(); 
    preferences.putInt("flow", l);
}
// === XỬ LÝ CHẾ ĐỘ AUTO/MANUAL ===
ERA_WRITE(V17) {
    struct tm timeinfo;
    if (!getLocalTime(&timeinfo)) {
        Serial.println("Không thể lấy thông tin thời gian");
        return;
    }
 
    i = param.getInt();
    if(i==1||i==0) {
        toggleState = !toggleState;  
        
        ERa.virtualWrite(V18, toggleState);  
        digitalWrite(led, toggleState);
        
        // Reset các trạng thái khi chuyển chế độ
        toggleState1 = LOW;
        toggleState2 = LOW;
        digitalWrite(led1, LOW); 
        digitalWrite(led2, LOW);
        digitalWrite(relay, LOW);
        digitalWrite(relay1, LOW);
        
        ERa.virtualWrite(V19, 0);
        ERa.virtualWrite(V20, 0);
        ERa.virtualWrite(V21, 0);
        ERa.virtualWrite(V22, 0);
    }

    if (toggleState == LOW) {  // Chế độ Auto
        Serial.println("Chế độ hiện tại: Auto");
        if (!checkScheduleSet()) {
            return;
        }

        // Kiểm tra thời điểm bắt đầu chu kỳ bơm
        if ((timeinfo.tm_year + 1900) == e || e == -1) {
            if ((timeinfo.tm_mon + 1) == d || d == -1) {
                if (timeinfo.tm_mday == c || c == -1) {
                    if (timeinfo.tm_hour == a || a == -1) {
                        if (timeinfo.tm_min == b) {
                            pumpCycleStarted = true;  // Đánh dấu bắt đầu chu kỳ
                            Serial.println("Đã đến thời điểm bắt đầu chu kỳ bơm");
                            // Khởi động bơm nếu cần
                            if(reading == LOW) {
                                digitalWrite(relay1, HIGH);
                                digitalWrite(led2, HIGH);
                                ERa.virtualWrite(V22, HIGH);
                            }
                        }
                    }
                }
            }
        }

        // Logic điều khiển bơm - sau thời điểm bắt đầu
        if (pumpCycleStarted) {
            if (reading == LOW) {  // Nếu hết nước
                digitalWrite(relay1, HIGH);
                digitalWrite(led2, HIGH);
                ERa.virtualWrite(V22, HIGH);
                Serial.println("Phát hiện hết nước - BẬT bơm");
                // Tạm dừng tưới khi không có nước
                digitalWrite(relay, LOW);
                digitalWrite(led1, LOW);
                ERa.virtualWrite(V20, LOW);
            } else {  // Nếu đủ nước
                digitalWrite(relay1, LOW);
                digitalWrite(led2, LOW);
                ERa.virtualWrite(V22, LOW);
                Serial.println("Phát hiện đủ nước - TẮT bơm");
                
                // Kiểm tra điều kiện tưới
                if (totalMilliLitres < l && (4095-value) <= 1000) {
                    digitalWrite(relay, HIGH);
                    digitalWrite(led1, HIGH);
                    ERa.virtualWrite(V20, HIGH);
                    Serial.println("Tiếp tục tưới - chưa đạt lưu lượng");
                }
            }
        }

        // Kiểm tra điều kiện dừng tưới
        if (totalMilliLitres >= l) {
            digitalWrite(relay, LOW);
            digitalWrite(led1, LOW);
            ERa.virtualWrite(V20, LOW);
            Serial.printf("Đạt lưu lượng đặt %d ml - Dừng tưới hoàn toàn\n", l);
        }

    } else {  // Chế độ Manual
        Serial.println("Chế độ hiện tại: Manual");
        pumpCycleStarted = false;  // Reset flag khi chuyển sang Manual
    }
}

// === XỬ LÝ NÚT NHẤN MANUAL CHO ĐỘNG CƠ TƯỚI ===
ERA_WRITE(V19) {
    if (toggleState == HIGH) {  // Chỉ hoạt động trong chế độ Manual
        j = param.getInt();
        if(j == 1 || j == 0) {
            digitalWrite(relay, j);
            digitalWrite(led1, j);
            ERa.virtualWrite(V20, j);
        }
    }
}

// === XỬ LÝ NÚT NHẤN MANUAL CHO ĐỘNG CƠ BƠM ===
ERA_WRITE(V21) {
    if (toggleState == HIGH) {  // Chỉ hoạt động trong chế độ Manual
        k = param.getInt();
        if(k == 1 || k == 0) {
            digitalWrite(relay1, k);
            digitalWrite(led2, k);
            ERa.virtualWrite(V22, k);
        }
    }
}
// === RESET LỊCH TƯỚI ===
void resetSchedule() {
    preferences.clear();
    // Reset tất cả giá trị về 0
    a = b = c = d = e = l = 0;
    
    // Cập nhật lên ERA
    ERa.virtualWrite(V1, 0);
    ERa.virtualWrite(V2, 0);
    ERa.virtualWrite(V3, 0);
    ERa.virtualWrite(V4, 0);
    ERa.virtualWrite(V5, 0);
    ERa.virtualWrite(V23, 0);
}

// === ĐỌC CẢM BIẾN NHIỆT ĐỘ, ĐỘ ẨM DHT ===
void th() {
    float h = dht.readHumidity();
    float t = dht.readTemperature();

    if (isnan(h) || isnan(t)) {
        Serial.println("Lỗi đọc cảm biến DHT!");
        return;
    }

    Serial.printf("Độ ẩm: %.1f%%, Nhiệt độ: %.1f°C\n", h, t);
    ERa.virtualWrite(V24, h);
    ERa.virtualWrite(V25, t);
}

// === ĐỌC CẢM BIẾN ĐỘ ẨM ĐẤT ===
void doamdat() {
    value = analogRead(34); 
    int soilMoisture = 4095 - value;
    ERa.virtualWrite(V9, soilMoisture);
    
    Serial.printf("Độ ẩm đất = %d\n", soilMoisture);
    
    // Chỉ xử lý trong chế độ Auto và đã bắt đầu chu kỳ
    if (toggleState == LOW && pumpCycleStarted) {
        if (reading == HIGH) {  // Có nước trong bồn
            if (totalMilliLitres < l) {  // Chưa đạt lưu lượng đặt
                if (soilMoisture <= SOIL_VERY_DRY) {
                    digitalWrite(MOTOR_WATER, MOTOR_ON);
                    digitalWrite(led1, HIGH);
                    ERa.virtualWrite(V20, HIGH);
                    Serial.println("Đất khô, bắt đầu tưới!");
                }
                else if (soilMoisture >= SOIL_VERY_WET) {
                    digitalWrite(MOTOR_WATER, MOTOR_OFF);
                    digitalWrite(led1, LOW);
                    ERa.virtualWrite(V20, LOW);
                    Serial.println("Đất đủ ẩm, dừng tưới");
                }
            }
        }
    }
    delay(1000);
}

// === XỬ LÝ NGẮT CHO CẢM BIẾN LƯU LƯỢNG ===
void pulseCounter() {
    pulseCount++;
}

// === XỬ LÝ LƯU LƯỢNG NƯỚC ===
void sendFlowData() {
    unsigned long currentTime = millis();

    if (currentTime - oldTime > 1000) {
        // Kiểm tra flow
        if (pulseCount == 0) {
            if (noFlowStartTime == 0) {
                noFlowStartTime = currentTime;
            }
            else if (currentTime - noFlowStartTime > NO_FLOW_TIMEOUT) {
                Serial.println("Cảnh báo: Có thể đã hết nước!");
            }
        } else {
            noFlowStartTime = 0;
        }
        
        // Tính lưu lượng hiện tại (ml)
        flowRate = ((1000.0 / (currentTime - oldTime)) * pulseCount) / 7.5;
        flowMilliLitres = (int)((flowRate / 60) * 1000);
        currentFlowMilliLitres += flowMilliLitres;

        // Kiểm tra đạt lưu lượng đặt
        if (currentFlowMilliLitres >= l) {
            accumulatedFlowMilliLitres += l;
            preferences.putULong("totalFlow", accumulatedFlowMilliLitres);
            currentFlowMilliLitres = 0;
            
            // Dừng bơm tưới khi đạt lưu lượng
            digitalWrite(relay, MOTOR_OFF);
            digitalWrite(led1, MOTOR_OFF);
            ERa.virtualWrite(V20, MOTOR_OFF);
            
            Serial.printf("Đạt lưu lượng đặt %d ml. Tổng: %lu ml\n", l, accumulatedFlowMilliLitres);
        }

        pulseCount = 0;
        ERa.virtualWrite(V10, currentFlowMilliLitres);
        ERa.virtualWrite(V11, accumulatedFlowMilliLitres);
        
        oldTime = currentTime;
    }
}

// === RESET LƯU LƯỢNG TÍCH LŨY ===
void resetTotalFlow() {
    accumulatedFlowMilliLitres = 0;
    preferences.putULong("totalFlow", 0);
    ERa.virtualWrite(V11, 0);
    Serial.println("Reset tổng lưu lượng về 0");
}

// === XỬ LÝ CẢM BIẾN PHAO ===
int readFloatSwitchWithFilter() {
    unsigned long currentTime = millis();
    
    if (currentTime - lastReadTime < DEBOUNCE_DELAY) {
        return lastStableReading;
    }
    
    // Đọc nhiều mẫu để xác nhận trạng thái
    int readingCount = 0;
    for (int i = 0; i < SAMPLE_COUNT; i++) {
        readingCount += digitalRead(floatSwitchPin);
        delay(SAMPLE_DELAY);
    }
    
    int currentReading;
    if (readingCount >= THRESHOLD_HIGH) {
        currentReading = HIGH;  // Phao đã dựng lên (đầy nước)
    } else if (readingCount <= THRESHOLD_LOW) {
        currentReading = LOW;   // Phao đã hạ xuống (hết nước)
    } else {
        currentReading = lastStableReading;
    }
    
    lastReadTime = currentTime;
    lastStableReading = currentReading;
    return currentReading;
}
// === XỬ LÝ PHAO MỰC NƯỚC ===
void phao() {
    // Đọc trạng thái phao có lọc nhiễu
    reading = readFloatSwitchWithFilter();
    
    ERa.virtualWrite(V6, reading);
    
    if (reading == HIGH) {
        Serial.println("Mực nước đầy, tắt bơm.");
        ERa.virtualWrite(V26, 1); // 1 = Phao cao
    } else {
        Serial.println("Mực nước thấp, bật bơm.");
        ERa.virtualWrite(V26, 0); // 0 = Phao thấp
    }
}

// === CẤU HÌNH THỜI GIAN ===
void setupTime() {
    configTime(TIMEZONE_OFFSET, 0, NTP_SERVER);
    
    Serial.println("Đang đồng bộ thời gian...");
    int retry = 0;
    while (time(nullptr) < 1000000000L && retry < 10) {
        Serial.print(".");
        delay(1000);
        retry++;
    }
    Serial.println("\nĐã đồng bộ thời gian!");
    
    printLocalTime();
}

// === KIỂM TRA LỊCH TƯỚI ĐÃ ĐƯỢC ĐẶT ===
bool checkScheduleSet() {
    if (a != 0 || b != 0 || c != 0 || d != 0 || e != 0) {
        return true;
    }
    Serial.println("Chưa có lịch tưới được đặt!");
    return false;
}

// === IN THỜI GIAN HIỆN TẠI VÀ XỬ LÝ AUTO ===
void printLocalTime() {
    struct tm timeinfo;
    if (!getLocalTime(&timeinfo)) {
        Serial.println("Không thể lấy thông tin thời gian");
        return;
    }
    
    // Gửi thời gian lên ERA
    ERa.virtualWrite(V12, timeinfo.tm_hour);
    ERa.virtualWrite(V13, timeinfo.tm_min);
    ERa.virtualWrite(V14, timeinfo.tm_mday);
    ERa.virtualWrite(V15, timeinfo.tm_mon + 1);
    ERa.virtualWrite(V16, timeinfo.tm_year + 1900);
}

// === XỬ LÝ NÚT NHẤN AUTO/MANUAL ===
void check_button() {
    boolean currentState = digitalRead(button);
    if (currentState == LOW && lastButtonState == HIGH) {
        delay(50); // Chống dội 
        if (digitalRead(button) == LOW) {
            toggleState = !toggleState;
            
            // Đồng bộ với ERA
            ERa.virtualWrite(V17, !toggleState);
            ERa.virtualWrite(V18, toggleState);
            digitalWrite(led, toggleState);

            // Reset các trạng thái khi chuyển chế độ
            if (toggleState == LOW) { // Auto
                toggleState1 = LOW;
                toggleState2 = LOW;
                digitalWrite(led1, LOW);
                digitalWrite(led2, LOW);
                digitalWrite(relay, LOW);
                digitalWrite(relay1, LOW);
                ERa.virtualWrite(V20, LOW);
                ERa.virtualWrite(V22, LOW);
                Serial.println("Chuyển sang chế độ Auto");
            } else { // Manual
                digitalWrite(relay, LOW);
                digitalWrite(relay1, LOW);
                digitalWrite(led1, LOW);
                digitalWrite(led2, LOW);
                ERa.virtualWrite(V20, LOW);
                ERa.virtualWrite(V22, LOW);
                Serial.println("Chuyển sang chế độ Manual");
            }
        }
    }
    lastButtonState = currentState;
}

// === XỬ LÝ NÚT NHẤN ĐỘNG CƠ TƯỚI ===
void check_button1() {
    boolean currentState1 = digitalRead(button1);
    delay(20);
    
    // Chỉ hoạt động trong chế độ Manual và khi có nước
    if (currentState1 == LOW && lastButtonState1 == HIGH && toggleState == HIGH && reading == HIGH) {
        toggleState1 = !toggleState1;
        digitalWrite(led1, toggleState1);
        ERa.virtualWrite(V19, toggleState1);
        ERa.virtualWrite(V20, toggleState1);
        
        if (toggleState1 == LOW) {
            digitalWrite(relay, LOW);
            Serial.println("Chế độ hiện tại: Bơm tưới tắt");
        } else {
            digitalWrite(relay, HIGH);
            Serial.println("Chế độ hiện tại: Bơm tưới bật");
        }
    }
    // Tắt tưới khi hết nước
    if(reading == LOW) {
        digitalWrite(relay, LOW);
        digitalWrite(led1, LOW);
        ERa.virtualWrite(V20, LOW);
    }
    lastButtonState1 = currentState1;
}
// === XỬ LÝ NÚT NHẤN ĐỘNG CƠ BƠM ===
void check_button2() {
    boolean currentState2 = digitalRead(button2);
    delay(20);
    
    // Chỉ hoạt động trong chế độ Manual và khi nước thấp
    if (currentState2 == LOW && lastButtonState2 == HIGH && toggleState == HIGH && reading == LOW) {
        toggleState2 = !toggleState2;
        digitalWrite(led2, toggleState2);
        ERa.virtualWrite(V21, toggleState2);
        ERa.virtualWrite(V22, toggleState2);
        
        if (toggleState2 == LOW) {
            digitalWrite(relay1, LOW);
            Serial.println("Chế độ hiện tại: Bơm nước tắt");
        } else {
            digitalWrite(relay1, HIGH);
            Serial.println("Chế độ hiện tại: Bơm nước bật");
        }
    }
    // Tắt bơm khi nước đầy
    if(reading == HIGH) {
        digitalWrite(relay1, LOW);
        digitalWrite(led2, LOW);
        ERa.virtualWrite(V22, LOW);
    }
    lastButtonState2 = currentState2;
}

// === CẬP NHẬT TRẠNG THÁI ĐỘNG CƠ ===
void updateMotorStatus() {
    unsigned long currentTime = millis();
    if (currentTime - lastUpdateTime >= UPDATE_INTERVAL) {
        lastUpdateTime = currentTime;

        // Cập nhật trạng thái động cơ bơm
        bool pumpStatus = digitalRead(relay1);
        ERa.virtualWrite(V22, pumpStatus);
        digitalWrite(led2, pumpStatus);
        
        // Cập nhật trạng thái động cơ tưới
        bool waterStatus = digitalRead(relay);
        ERa.virtualWrite(V20, waterStatus);
        digitalWrite(led1, waterStatus);
    }
}

// === HÀM KHỞI TẠO ===
void setup() {
    Serial.begin(115200);
    Serial.println("Khởi động hệ thống tưới tự động...");
    
    // Khởi tạo bộ nhớ
    preferences.begin("scheduler", false);
    
    // Đọc các giá trị đã lưu
    a = preferences.getInt("hour", 0);
    b = preferences.getInt("minute", 0);
    c = preferences.getInt("day", 0);
    d = preferences.getInt("month", 0);
    e = preferences.getInt("year", 0);
    l = preferences.getInt("flow", 0);
    
    // Khởi tạo kết nối
    ERa.begin(ssid, pass);
    
    // Khởi tạo cảm biến
    dht.begin();
    
    // Cấu hình chân GPIO
    pinMode(sensorPin, INPUT);
    pinMode(floatSwitchPin, INPUT_PULLUP);
    pinMode(led, OUTPUT);
    pinMode(button, INPUT_PULLUP);
    pinMode(led1, OUTPUT);
    pinMode(button1, INPUT_PULLUP);
    pinMode(led2, OUTPUT);
    pinMode(button2, INPUT_PULLUP);
    pinMode(relay, OUTPUT);
    pinMode(relay1, OUTPUT);
    
    // Khởi tạo trạng thái
    toggleState = LOW;    // Bắt đầu ở chế độ Auto
    toggleState1 = LOW;
    toggleState2 = LOW;
    pumpCycleStarted = false;
    
    // Tắt tất cả đèn và relay
    digitalWrite(led, LOW);
    digitalWrite(led1, LOW);
    digitalWrite(led2, LOW);
    digitalWrite(relay, LOW);
    digitalWrite(relay1, LOW);
    
    // Reset giá trị trên ERA
    ERa.virtualWrite(V17, 0);
    ERa.virtualWrite(V18, 0);
    ERa.virtualWrite(V19, 0);
    ERa.virtualWrite(V20, 0);
    ERa.virtualWrite(V21, 0);
    ERa.virtualWrite(V22, 0);

    // Cập nhật giá trị đã lưu lên ERA
    ERa.virtualWrite(V1, a);
    ERa.virtualWrite(V2, b);
    ERa.virtualWrite(V3, c);
    ERa.virtualWrite(V4, d);
    ERa.virtualWrite(V5, e);
    ERa.virtualWrite(V23, l);

    // Cấu hình ngắt cho cảm biến lưu lượng
    attachInterrupt(digitalPinToInterrupt(sensorPin), pulseCounter, FALLING);
    
    // Cấu hình timer
    timer.setInterval(1000L, sendFlowData);
    timer.setInterval(1000L, printLocalTime);
    
    // Cấu hình thời gian
    configTime(7 * 3600, 0, "pool.ntp.org");

    // Khôi phục lưu lượng tích lũy
    accumulatedFlowMilliLitres = preferences.getULong("totalFlow", 0);
    ERa.virtualWrite(V11, accumulatedFlowMilliLitres);

    Serial.println("Khởi tạo hoàn tất!");
}

// === VÒNG LẶP CHÍNH ===
void loop() {
    ERa.run();        // Xử lý kết nối ERA
    timer.run();      // Xử lý timer
    
    // Đọc các cảm biến
    th();            // Nhiệt độ, độ ẩm
    doamdat();       // Độ ẩm đất
    phao();          // Mực nước
    
    // Xử lý nút nhấn
    check_button();   // Auto/Manual
    check_button1();  // Động cơ tưới
    check_button2();  // Động cơ bơm
    
    // Cập nhật trạng thái
    updateMotorStatus();
}
